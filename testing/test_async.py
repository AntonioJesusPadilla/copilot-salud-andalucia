# Crear archivo: testing/test_async.py
#!/usr/bin/env python3
"""
Test Espec√≠fico para Funcionamiento As√≠ncrono
"""

import asyncio
import sys
import os

# A√±adir el directorio ra√≠z al path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

def test_async_imports():
    """Test de importaciones as√≠ncronas"""
    print("üß™ TEST ASYNC - IMPORTACIONES")
    print("=" * 40)
    
    async_modules = [
        "asyncio",
        "aiohttp", 
        "threading"
    ]
    
    for module in async_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {module}")
        except ImportError as e:
            print(f"   ‚ùå {module}: {e}")
            return False
    
    return True

def test_async_processor():
    """Test del procesador as√≠ncrono"""
    print("\nÔøΩÔøΩ TEST ASYNC - PROCESADOR")
    print("=" * 40)
    
    try:
        from modules.ai.async_ai_processor import AsyncAIProcessor
        processor = AsyncAIProcessor()
        print("   ‚úÖ AsyncAIProcessor creado")
        
        # Test de m√©todos
        metrics = processor.get_metrics()
        print(f"   ‚úÖ M√©tricas: {metrics}")
        
        cache_stats = processor.get_cache_stats()
        print(f"   ‚úÖ Cache stats: {cache_stats}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False

def test_streamlit_wrapper():
    """Test del wrapper de Streamlit"""
    print("\nüîÑ TEST ASYNC - WRAPPER")
    print("=" * 40)
    
    try:
        from modules.ai.streamlit_async_wrapper import StreamlitAsyncWrapper
        wrapper = StreamlitAsyncWrapper()
        print("   ‚úÖ StreamlitAsyncWrapper creado")
        
        # Test de m√©tricas
        metrics = wrapper.get_processing_metrics()
        print(f"   ‚úÖ M√©tricas wrapper: {metrics}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False

async def test_async_functionality():
    """Test de funcionalidad as√≠ncrona real"""
    print("\n‚ö° TEST ASYNC - FUNCIONALIDAD")
    print("=" * 40)
    
    try:
        from modules.ai.async_ai_processor import AsyncAIProcessor
        
        processor = AsyncAIProcessor()
        
        # Datos de prueba
        test_data = {
            'hospitales': [{'nombre': 'Hospital Test', 'distrito': 'Centro'}],
            'demografia': {'poblacion_2025': [100000]}
        }
        
        # Test de procesamiento as√≠ncrono
        print("   ÔøΩÔøΩ Probando procesamiento as√≠ncrono...")
        result = await processor.process_query_async(
            "¬øCu√°ntos hospitales hay?", 
            test_data, 
            "invitado"
        )
        
        print(f"   ‚úÖ Resultado: {result.get('analysis_type', 'error')}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error en funcionalidad: {e}")
        return False

def main():
    """Ejecutar todos los tests"""
    print("üöÄ INICIANDO TESTS ASYNC/AWAIT")
    print("=" * 50)
    
    tests = [
        test_async_imports,
        test_async_processor,
        test_streamlit_wrapper
    ]
    
    passed = 0
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä TESTS S√çNCRONOS: {passed}/{len(tests)}")
    
    # Test as√≠ncrono
    print("\n‚ö° Ejecutando test as√≠ncrono...")
    try:
        asyncio.run(test_async_functionality())
        print("   ‚úÖ Test as√≠ncrono completado")
        passed += 1
    except Exception as e:
        print(f"   ‚ùå Test as√≠ncrono fall√≥: {e}")
    
    print("\n" + "=" * 50)
    print(f"ÔøΩÔøΩ TOTAL: {passed}/{len(tests) + 1} tests pasaron")
    
    if passed == len(tests) + 1:
        print("üéâ ¬°TODOS LOS TESTS ASYNC PASARON!")
        return True
    else:
        print("‚ö†Ô∏è Algunos tests fallaron")
        return False

if __name__ == "__main__":
    main()