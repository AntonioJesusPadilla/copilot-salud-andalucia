#!/usr/bin/env python3
"""
Script de Inicio R√°pido - Copilot Salud Andaluc√≠a
Inicia la aplicaci√≥n con la configuraci√≥n correcta
"""

import os
import sys
import subprocess
from pathlib import Path

def check_environment():
    """Verificar que el entorno est√© configurado correctamente"""
    print("üîç Verificando entorno...")
    
    # Verificar Python
    if sys.version_info < (3, 9):
        print("‚ùå Se requiere Python 3.9 o superior")
        return False
    
    # Verificar archivos cr√≠ticos
    required_files = [
        "src/app.py",
        "config/requirements.txt",
        "config/.streamlit/config.toml"
    ]
    
    for file_path in required_files:
        if not os.path.exists(file_path):
            print(f"‚ùå Archivo requerido no encontrado: {file_path}")
            return False
    
    print("‚úÖ Entorno verificado")
    return True

def check_dependencies():
    """Verificar dependencias cr√≠ticas"""
    print("üì¶ Verificando dependencias...")
    
    try:
        import streamlit
        import pandas
        import plotly
        print("‚úÖ Dependencias cr√≠ticas disponibles")
        return True
    except ImportError as e:
        print(f"‚ùå Dependencias faltantes: {e}")
        print("üí° Ejecuta: python install_dependencies.py")
        return False

def check_secrets():
    """Verificar configuraci√≥n de secrets"""
    print("üîê Verificando configuraci√≥n...")
    
    secrets_file = ".streamlit/secrets.toml"
    example_file = ".streamlit/secrets.toml.example"
    
    if os.path.exists(secrets_file):
        print("‚úÖ Archivo de secrets encontrado")
        return True
    elif os.path.exists(example_file):
        print("‚ö†Ô∏è Archivo de ejemplo encontrado")
        print("üí° Copia .streamlit/secrets.toml.example a .streamlit/secrets.toml")
        print("   y configura tu GROQ_API_KEY")
        return False
    else:
        print("‚ö†Ô∏è Archivo de secrets no encontrado")
        print("üí° Crea .streamlit/secrets.toml con tu GROQ_API_KEY")
        return False

def start_application():
    """Iniciar la aplicaci√≥n Streamlit"""
    print("üöÄ Iniciando Copilot Salud Andaluc√≠a...")
    
    # Comando para iniciar Streamlit
    cmd = [
        sys.executable, "-m", "streamlit", "run", "src/app.py",
        "--server.port", "8501",
        "--server.headless", "true",
        "--browser.gatherUsageStats", "false"
    ]
    
    try:
        print("üåê Abriendo en: http://localhost:8501")
        print("‚èπÔ∏è Presiona Ctrl+C para detener la aplicaci√≥n")
        print("=" * 50)
        
        # Ejecutar Streamlit
        subprocess.run(cmd, check=True)
        
    except KeyboardInterrupt:
        print("\nüëã Aplicaci√≥n detenida por el usuario")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error iniciando la aplicaci√≥n: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå Streamlit no encontrado")
        print("üí° Instala con: pip install streamlit")
        return False
    
    return True

def main():
    """Funci√≥n principal"""
    print("üè• COPILOT SALUD ANDALUC√çA - INICIO R√ÅPIDO")
    print("=" * 50)
    
    # Verificar entorno
    if not check_environment():
        print("\n‚ùå Entorno no configurado correctamente")
        sys.exit(1)
    
    # Verificar dependencias
    if not check_dependencies():
        print("\n‚ùå Dependencias faltantes")
        sys.exit(1)
    
    # Verificar secrets (opcional para desarrollo)
    secrets_ok = check_secrets()
    if not secrets_ok:
        print("\n‚ö†Ô∏è Configuraci√≥n de secrets incompleta")
        print("üí° La aplicaci√≥n funcionar√° en modo limitado")
        response = input("¬øContinuar de todos modos? (s/n): ").lower()
        if response != 's':
            sys.exit(1)
    
    # Iniciar aplicaci√≥n
    print("\n" + "=" * 50)
    start_application()

if __name__ == "__main__":
    main()
